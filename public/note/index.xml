<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Personal Blog on Evan Matthews</title>
    <link>http://localhost:1313/note/</link>
    <description>Recent content in Personal Blog on Evan Matthews</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Playing with 4o Image Generation</title>
      <link>http://localhost:1313/note/playing-with-4o-image-generation/</link>
      <pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/playing-with-4o-image-generation/</guid>
      <description>OpenAI&amp;rsquo;s newest image generation model has radically change the landscape of AI-generated images, (for better, or for worse). Admittedly, I&amp;rsquo;ve acted like a &amp;ldquo;kid on Christmas morning&amp;rdquo; for the past two weeks messing around with this model, and I figured what better than to post my use cases and results.&#xA;For the record: this isn&amp;rsquo;t to start some argument about AI art being slop or conflicting with copyright. I&amp;rsquo;m of the opinion that, as much as Image generation trivializes the manual work of drawing/painting art, it&amp;rsquo;s by no means a replacement.</description>
    </item>
    <item>
      <title>Cool Python tidbits I enjoy using</title>
      <link>http://localhost:1313/note/cool-python-tidbits-i-enjoy-using/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/cool-python-tidbits-i-enjoy-using/</guid>
      <description>Semicolons Languages such as Java and C/C++ used a terminator to indicate the end of a line of code- most often the semicolon ( ; ). While this is not a mandatory feature for Python, you can still use semicolons as line separators. I personally use semicolons to make the most out of horizontal space in my code by combing initialization lines or similar expressions.&#xA;a = 1&#xD;b = 3.</description>
    </item>
    <item>
      <title>Barbenheimer Review</title>
      <link>http://localhost:1313/note/barbenheimer-review/</link>
      <pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/barbenheimer-review/</guid>
      <description>Barbenheimer Last Friday, I had the pleasure of participating in the Barbenheimer craze, watching Greta Gerwig&amp;rsquo;s Barbie and Christopher Nolan&amp;rsquo;s Oppenheimer. While I don&amp;rsquo;t visit the movie theater often, I found this double feature to be tons of fun, so I&amp;rsquo;ve decided to give my reviews of both movies in the order that I saw them.&#xA;Barbie I went into Barbie with the understanding that I was certainly not the movie&amp;rsquo;s target audience and that a lot of material wouldn&amp;rsquo;t land with me or any of the other males in the theater.</description>
    </item>
    <item>
      <title>Fourier Transform</title>
      <link>http://localhost:1313/note/fourier-transform/</link>
      <pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/fourier-transform/</guid>
      <description>Fourier Transform The Fourier Transform is a transformation of a time-series function which returns a respective frequency-series function, or an equivalent function who takes a frequency $f$ as an input rather than a time $t$&#xA;$$\hat{f}(\xi) = \int_{-\infty}^{\infty} f(t) e^{-i2\pi\xi t} dt$$&#xA;where $f(t)$ is the original function for our sound in terms of time $t$, and $\hat{f}(\xi)$ is an equivalent function in terms of frequency $\xi$. In essence, this function takes in a frequency and determines that frequency&amp;rsquo;s intensity or usage in a sound across all time values $t$ in $f(t)$- hence why we&amp;rsquo;re integrating with respect to time.</description>
    </item>
    <item>
      <title>Amplitude</title>
      <link>http://localhost:1313/note/amplitude/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/amplitude/</guid>
      <description>Amplitude The amplitude of a sound is physically defined as the amount of displacement produced by sound waves onto air particles. From the listener&amp;rsquo;s point of view, this variable represents the &amp;ldquo;volume&amp;rdquo; of the sound.&#xA;$$S(t) = A\sin(\omega t + \phi)$$&#xA;Given a sinusoidal function, we define $A$ to be our peak amplitude, or the highest volume that our sound reaches. That is, $\forall t \in \Reals, \space x(t) \in [-A, A] $, (for all inputs $t$, representing time in our sinusoidal function, $x(t)$ will always be between and include $-A$ and $A$).</description>
    </item>
    <item>
      <title>Waveforms and Audio Basics</title>
      <link>http://localhost:1313/note/waveforms-and-audio-basics/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/waveforms-and-audio-basics/</guid>
      <description>[[fetch]]&#xD;files = [&#34;./audio1.py&#34;]&#xD;Introduction Understanding the mathematical logic behind sound- how certain factors effect what we hear and how we hear it- is the first step into audio signal processing. You should likely understand some basics about trigonometry and periodic functions to best understand the content. This article will run through basic vocabulary, explain how sound is processed and stored digitally, and demonstrate basic audio processing techniques in Python.</description>
    </item>
    <item>
      <title>How I Made this Website</title>
      <link>http://localhost:1313/note/how-i-made-this-website/</link>
      <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/how-i-made-this-website/</guid>
      <description>⚠️ This article assumes you have a decent understanding about console commands and Git.&#xA;Introduction I have something rather important to get off my chest:&#xA;I don&#39;t like web dev.&#xD;There, I said it. I&#39;ve used plenty of tools in the past, including HTML, CSS and Javascript, yet the idea of making websites never truly stuck. To me, there was always an additional layer of complication that I could never get around.</description>
    </item>
  </channel>
</rss>
