<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Evan Matthews</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on Evan Matthews</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cool Python tidbits I enjoy using</title>
      <link>http://localhost:1313/note/cool-python-tidbits-i-enjoy-using/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/cool-python-tidbits-i-enjoy-using/</guid>
      <description>Semicolons Languages such as Java and C/C++ used a terminator to indicate the end of a line of code- most often the semicolon ( ; ). While this is not a mandatory feature for Python, you can still use semicolons as line separators. I personally use semicolons to make the most out of horizontal space in my code by combing initialization lines or similar expressions.&#xA;a = 1&#xD;b = 3.</description>
    </item>
    <item>
      <title>Fourier Transform</title>
      <link>http://localhost:1313/note/fourier-transform/</link>
      <pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/fourier-transform/</guid>
      <description>Fourier Transform The Fourier Transform is a transformation of a time-series function which returns a respective frequency-series function, or an equivalent function who takes a frequency $f$ as an input rather than a time $t$&#xA;$$\hat{f}(\xi) = \int_{-\infty}^{\infty} f(t) e^{-i2\pi\xi t} dt$$&#xA;where $f(t)$ is the original function for our sound in terms of time $t$, and $\hat{f}(\xi)$ is an equivalent function in terms of frequency $\xi$. In essence, this function takes in a frequency and determines that frequency&amp;rsquo;s intensity or usage in a sound across all time values $t$ in $f(t)$- hence why we&amp;rsquo;re integrating with respect to time.</description>
    </item>
    <item>
      <title>Amplitude</title>
      <link>http://localhost:1313/note/amplitude/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/amplitude/</guid>
      <description>Amplitude The amplitude of a sound is physically defined as the amount of displacement produced by sound waves onto air particles. From the listener&amp;rsquo;s point of view, this variable represents the &amp;ldquo;volume&amp;rdquo; of the sound.&#xA;$$S(t) = A\sin(\omega t + \phi)$$&#xA;Given a sinusoidal function, we define $A$ to be our peak amplitude, or the highest volume that our sound reaches. That is, $\forall t \in \Reals, \space x(t) \in [-A, A] $, (for all inputs $t$, representing time in our sinusoidal function, $x(t)$ will always be between and include $-A$ and $A$).</description>
    </item>
    <item>
      <title>Waveforms and Audio Basics</title>
      <link>http://localhost:1313/note/waveforms-and-audio-basics/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/note/waveforms-and-audio-basics/</guid>
      <description>[[fetch]]&#xD;files = [&#34;./audio1.py&#34;]&#xD;Introduction Understanding the mathematical logic behind sound- how certain factors effect what we hear and how we hear it- is the first step into audio signal processing. You should likely understand some basics about trigonometry and periodic functions to best understand the content. This article will run through basic vocabulary, explain how sound is processed and stored digitally, and demonstrate basic audio processing techniques in Python.</description>
    </item>
    <item>
      <title>Update: Python Compatability</title>
      <link>http://localhost:1313/post/2023/06/08/update-python-compatability/</link>
      <pubDate>Thu, 08 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023/06/08/update-python-compatability/</guid>
      <description>[[fetch]]&#xD;files = [&#34;./updatecode.py&#34;, &#34;./reunion.wav&#34;]&#xD;Hey everyone,&#xA;My website now has support for Python code using PyScript! This means that, on top of formatting code for LaTeX formulas&amp;hellip;&#xA;sr1, sample1 = wavread(&#39;./reunion.wav&#39;)&#xD;sample1 = sample1[:int(len(sample1)/4)]&#xD;figure, axs = plt.subplots(1,2)&#xD;figure.set_size_inches(18, 8)&#xD;figure.suptitle(&amp;quot;Chopin Op.28 No. 1 \&amp;quot;Reunion\&amp;quot;&amp;quot;)&#xD;axs[0].plot(sample1); axs[0].set_title(&amp;quot;Waveform&amp;quot;)&#xD;a = spectrogram(axs[1], sample1, sr1)&#xD;display(figure, target=&amp;quot;plot&amp;quot;)&#xD;&amp;hellip;my website can now show implementations of formulas and display and plot code output! I hope to start using this feature for my future Audio Processing articles by directly implementing Python code into the page.</description>
    </item>
  </channel>
</rss>
